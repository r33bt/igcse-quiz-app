"use client"

import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Card, CardContent } from '@/components/ui/card'
import { 
  Target, 
  BookOpen, 
  Trophy, 
  CheckCircle2, 
  RefreshCw, 
  Clock,
  Award,
  TrendingUp,
  Lightbulb
} from 'lucide-react'
import Link from 'next/link'

type MasteryLevel = 'Unassessed' | 'Developing' | 'Approaching' | 'Proficient' | 'Mastery'

interface SubtopicProgress {
  subtopic_id: string
  mastery_level: MasteryLevel
  mastery_percentage: number
  core_questions_attempted: number
  core_questions_correct: number
  easy_questions_attempted: number
  easy_questions_correct: number
  medium_questions_attempted: number
  medium_questions_correct: number
  hard_questions_attempted: number
  hard_questions_correct: number
  questions_attempted: number
  questions_correct: number
  baseline_assessment_completed: boolean
  last_practiced: string | null
}

interface IGCSESubtopic {
  id: string
  topic_id: string
  subtopic_code: string
  title: string
  description: string
  paper_type: 'Core' | 'Extended'
}

interface QuestionAvailability {
  total: number
  byDifficulty: { easy: number, medium: number, hard: number }
  byCategory: { core: number, extended: number }
  baselineReady: number
}

interface SubtopicProgressCardProps {
  subtopic: IGCSESubtopic
  progress?: SubtopicProgress
  availability: QuestionAvailability
}

// Enhanced mastery calculation with fallback logic
const calculateMasteryLevel = (progress: SubtopicProgress | undefined): { level: number, label: string, color: string, description: string } => {
  const levelMap = {
    'Unassessed': { 
      level: 0, 
      label: 'Unassessed', 
      color: 'bg-gray-100 text-gray-700 border-gray-200',
      description: 'No baseline established yet. Take an assessment to see your current level.'
    },
    'Developing': { 
      level: 2, 
      label: 'Developing', 
      color: 'bg-orange-100 text-orange-700 border-orange-200',
      description: 'Building foundational understanding. Focus on core concepts and practice.'
    },
    'Approaching': { 
      level: 3, 
      label: 'Approaching', 
      color: 'bg-yellow-100 text-yellow-700 border-yellow-200',
      description: 'Good progress made. Challenge yourself with harder questions.'
    },
    'Proficient': { 
      level: 4, 
      label: 'Proficient', 
      color: 'bg-blue-100 text-blue-700 border-blue-200',
      description: 'Strong understanding demonstrated. Ready to attempt mastery.'
    },
    'Mastery': { 
      level: 5, 
      label: 'Mastery', 
      color: 'bg-green-100 text-green-700 border-green-200',
      description: 'Excellent command of this topic. Maintain with periodic review.'
    }
  }

  // If no progress data, return Unassessed
  if (!progress || progress.questions_attempted === 0) {
    return levelMap['Unassessed']
  }

  // Calculate actual performance percentage
  const actualPercentage = Math.round((progress.questions_correct / progress.questions_attempted) * 100)
  
  // If database has a valid mastery_level and it matches performance, use it
  const dbMasteryLevel = progress.mastery_level
  if (dbMasteryLevel && levelMap[dbMasteryLevel]) {
    // Verify database level makes sense with actual performance
    const dbLevel = levelMap[dbMasteryLevel]
    const expectedRange = {
      'Unassessed': [0, 0],
      'Developing': [1, 59], 
      'Approaching': [60, 74],
      'Proficient': [75, 89],
      'Mastery': [90, 100]
    }
    
    const [min, max] = expectedRange[dbMasteryLevel] || [0, 0]
    
    // If DB level matches performance, use it
    if (actualPercentage >= min && actualPercentage <= max) {
      return dbLevel
    }
  }

  // Recalculate level based on actual performance
  if (actualPercentage >= 90) {
    return levelMap['Mastery']
  } else if (actualPercentage >= 75) {
    return levelMap['Proficient'] 
  } else if (actualPercentage >= 60) {
    return levelMap['Approaching']
  } else if (actualPercentage >= 1) {
    return levelMap['Developing']
  } else {
    return levelMap['Unassessed']
  }
}

// Core/Extended performance section
const PerformanceColumn = ({ 
  title, 
  data, 
  color 
}: { 
  title: string
  data: { easy: number[], medium: number[], hard: number[] }
  color: string 
}) => (
  <div className="space-y-2">
    <h4 className={`text-sm font-semibold ${color} uppercase tracking-wide`}>{title}</h4>
    <div className="space-y-1">
      {Object.entries(data).map(([difficulty, values]) => {
        const [correct, attempted] = values as [number, number]
        const percentage = attempted > 0 ? Math.round((correct / attempted) * 100) : 0
        return (
          <div key={difficulty} className="flex justify-between items-center">
            <span className="text-sm text-gray-600 capitalize">{difficulty}:</span>
            <div className="flex items-center gap-2">
              <span className="text-sm font-medium text-gray-900">{correct}/{attempted}</span>
              {attempted > 0 && (
                <span className="text-xs text-gray-500">({percentage}%)</span>
              )}
            </div>
          </div>
        )
      })}
    </div>
  </div>
)

export default function SubtopicProgressCard({ 
  subtopic, 
  progress, 
  availability 
}: SubtopicProgressCardProps) {
  
  const masteryInfo = calculateMasteryLevel(progress) || {
 
    level: 0, 
    label: 'Unassessed', 
    color: 'bg-gray-100 text-gray-700 border-gray-200',
    description: 'No baseline established yet. Take an assessment to see your current level.'
  }
  
  // Calculate Core/Extended breakdown
  const getPerformanceData = () => {
    if (!progress) {
      return {
        core: { easy: [0, 0], medium: [0, 0], hard: [0, 0] },
        extended: { easy: [0, 0], medium: [0, 0], hard: [0, 0] }
      }
    }

    // Estimate Core vs Extended split (60% core, 40% extended)
    const coreRatio = progress.core_questions_attempted > 0 
      ? progress.core_questions_attempted / progress.questions_attempted 
      : 0.6

    const coreEasy = Math.round(progress.easy_questions_attempted * coreRatio)
    const coreMedium = Math.round(progress.medium_questions_attempted * coreRatio) 
    const coreHard = Math.round(progress.hard_questions_attempted * coreRatio)
    
    const extendedEasy = progress.easy_questions_attempted - coreEasy
    const extendedMedium = progress.medium_questions_attempted - coreMedium
    const extendedHard = progress.hard_questions_attempted - coreHard

    const coreEasyCorrect = Math.round(progress.easy_questions_correct * coreRatio)
    const coreMediumCorrect = Math.round(progress.medium_questions_correct * coreRatio)
    const coreHardCorrect = Math.round(progress.hard_questions_correct * coreRatio)

    const extendedEasyCorrect = progress.easy_questions_correct - coreEasyCorrect
    const extendedMediumCorrect = progress.medium_questions_correct - coreMediumCorrect
    const extendedHardCorrect = progress.hard_questions_correct - coreHardCorrect

    return {
      core: {
        easy: [Math.max(0, coreEasyCorrect), Math.max(0, coreEasy)],
        medium: [Math.max(0, coreMediumCorrect), Math.max(0, coreMedium)],
        hard: [Math.max(0, coreHardCorrect), Math.max(0, coreHard)]
      },
      extended: {
        easy: [Math.max(0, extendedEasyCorrect), Math.max(0, extendedEasy)],
        medium: [Math.max(0, extendedMediumCorrect), Math.max(0, extendedMedium)],
        hard: [Math.max(0, extendedHardCorrect), Math.max(0, extendedHard)]
      }
    }
  }

  const performanceData = getPerformanceData()

  // Generate analysis and recommendations
  const getAnalysisAndRecommendations = () => {
    if (!progress || progress.questions_attempted === 0) {
      return {
        analysis: "",
        recommendations: ["Start with the assessment to establish your baseline performance."]
      }
    }

    const easyAccuracy = progress.easy_questions_attempted > 0 ? Math.round((progress.easy_questions_correct / progress.easy_questions_attempted) * 100) : 0
    const mediumAccuracy = progress.medium_questions_attempted > 0 ? Math.round((progress.medium_questions_correct / progress.medium_questions_attempted) * 100) : 0
    const hardAccuracy = progress.hard_questions_attempted > 0 ? Math.round((progress.hard_questions_correct / progress.hard_questions_attempted) * 100) : 0

    let analysis = ""
    const recommendations = []

    if (easyAccuracy >= 80 && mediumAccuracy >= 70) {
      analysis = "Strong foundation established. Ready for more challenging questions."
      if (hardAccuracy < 60) {
        recommendations.push("Focus on hard questions to reach the next level.")
      }
    } else if (easyAccuracy >= 70) {
      analysis = "Good grasp of basics. Work on applying concepts in different contexts."
      recommendations.push("Practice medium difficulty questions to improve understanding.")
    } else {
      analysis = "Focus on building fundamental understanding of core concepts."
      recommendations.push("Review basic concepts and practice easy questions first.")
    }

    if (progress.questions_attempted < 20) {
      recommendations.push("Take more practice questions for better assessment accuracy.")
    }

    return { analysis, recommendations }
  }

  const { analysis, recommendations } = getAnalysisAndRecommendations()

  // Smart action buttons
  const getActionButton = () => {
    if (!availability || availability.total === 0) {
      return (
        <Badge variant="secondary" className="text-gray-500 w-full justify-center py-2">
          No Questions Available
        </Badge>
      )
    }

    switch (masteryInfo.level) {
      case 0:
        return (
          <Link href={`/quiz/assessment/${subtopic.id}`}>
            <Button className="w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 rounded-lg">
              <Target className="h-4 w-4 mr-2" />
              Take Assessment
            </Button>
          </Link>
        )
      case 2:
        return (
          <Link href={`/quiz/practice/${subtopic.id}`}>
            <Button className="w-full bg-orange-600 hover:bg-orange-700 text-white font-semibold py-3 rounded-lg">
              <BookOpen className="h-4 w-4 mr-2" />
              Focus Practice
            </Button>
          </Link>
        )
      case 3:
        return (
          <Link href={`/quiz/practice/${subtopic.id}?focus=hard`}>
            <Button className="w-full bg-yellow-600 hover:bg-yellow-700 text-white font-semibold py-3 rounded-lg">
              <TrendingUp className="h-4 w-4 mr-2" />
              Practice Hard Questions
            </Button>
          </Link>
        )
      case 4:
        return (
          <Link href={`/quiz/mastery/${subtopic.id}`}>
            <Button className="w-full bg-green-600 hover:bg-green-700 text-white font-semibold py-3 rounded-lg">
              <Award className="h-4 w-4 mr-2" />
              Attempt Mastery
            </Button>
          </Link>
        )
      case 5:
        return (
          <div className="space-y-2">
            <div className="flex items-center justify-center gap-2 p-3 bg-green-50 rounded-lg border border-green-200">
              <CheckCircle2 className="h-5 w-5 text-green-600" />
              <span className="text-sm font-medium text-green-800">Level 5 Mastery Achieved</span>
            </div>
            <Link href={`/quiz/review/${subtopic.id}`}>
              <Button variant="outline" className="w-full py-2 rounded-lg">
                <RefreshCw className="h-4 w-4 mr-2" />
                Periodic Review
              </Button>
            </Link>
          </div>
        )
      default:
        return (
          <Link href={`/quiz/assessment/${subtopic.id}`}>
            <Button className="w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 rounded-lg">
              <Target className="h-4 w-4 mr-2" />
              Start Assessment
            </Button>
          </Link>
        )
    }
  }

  return (
    <Card className="hover:shadow-lg transition-all duration-200 border rounded-xl bg-white">
      <CardContent className="p-6">
        {/* TWO-COLUMN LAYOUT: 2/3 + 1/3 */}
        <div className="grid grid-cols-3 gap-6">
          
          {/* LEFT COLUMN (2/3): Title + Content + Analysis */}
          <div className="col-span-2 space-y-4">
            {/* Title and Subtitle with Icon */}
            <div className="flex items-start gap-3">
              <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0">
                <BookOpen className="h-5 w-5 text-blue-600" />
              </div>
              <div className="flex-1">
                <h3 className="text-2xl font-bold text-gray-900 mb-1">
                  {subtopic.subtopic_code} {subtopic.title}
                </h3>
                <p className="text-gray-600 text-base leading-relaxed">
                  {subtopic.description}
                </p>
              </div>
            </div>

            {/* Core/Extended Performance Data */}
            {progress && progress.questions_attempted > 0 && (
              <div className="grid grid-cols-2 gap-6 py-3 border-t border-gray-100">
                <PerformanceColumn 
                  title="Core"
                  data={performanceData.core}
                  color="text-blue-700"
                />
                <PerformanceColumn 
                  title="Extended" 
                  data={performanceData.extended}
                  color="text-purple-700"
                />
              </div>
            )}

            {/* Analysis and Conclusion */}
            {analysis && (
              <div className="pt-3 border-t border-gray-100">
                <div className="flex items-start gap-2 p-3 bg-blue-50 rounded-lg">
                  <Lightbulb className="h-4 w-4 text-blue-600 mt-0.5 flex-shrink-0" />
                  <div>
                    <div className="text-sm font-medium text-blue-900">Analysis:</div>
                    <div className="text-sm text-blue-800">{analysis}</div>
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* RIGHT COLUMN (1/3): Level + Call to Action + Recommendations */}
          <div className="col-span-1 space-y-4">
            {/* Level Display */}
            <div className="text-center">
              <div className="text-3xl font-bold text-gray-900 mb-2">Level {masteryInfo.level}</div>
              <Badge className={`text-sm font-medium px-3 py-1 mb-3 ${masteryInfo.color}`}>
                {masteryInfo.label}
              </Badge>
              <p className="text-xs text-gray-600 leading-relaxed">
                {masteryInfo.description}
              </p>
            </div>

            {/* Call to Action */}
            <div className="pt-2">
              {getActionButton()}
            </div>

            {/* Recommendations */}
            {recommendations.length > 0 && (
              <div className="pt-2">
                <h4 className="text-xs font-semibold text-gray-700 uppercase tracking-wide mb-2">
                  Recommendations
                </h4>
                <div className="space-y-1">
                  {recommendations.map((rec, index) => (
                    <div key={index} className="text-xs text-gray-600 leading-relaxed">
                      • {rec}
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Small Metadata */}
            {progress?.last_practiced && (
              <div className="pt-2 border-t border-gray-100">
                <div className="flex items-center gap-1 text-xs text-gray-400">
                  <Clock className="h-3 w-3" />
                  <span>Last: {new Date(progress.last_practiced).toLocaleDateString()}</span>
                </div>
              </div>
            )}
          </div>
        </div>
      </CardContent>
    </Card>
  )
}
